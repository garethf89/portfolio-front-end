### Type definitions saved at 2020-10-11T11:40:47.462Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata @derivedTypes {
  title: String
  description: String
  siteUrl: String
  author: String
  image: String
  menuLinks: [SiteSiteMetadataMenuLinks]
  basePath: String
}

type SiteSiteMetadataMenuLinks {
  name: String
  slug: String
  anchor: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node @childOf(mimeTypes: [], types: ["File"], many: false) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = NO_CHANGE, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type InlineSvg {
  content: String
  originalContent: String
  dataURI: String
  absolutePath: String
  relativePath: String
}

type MarkdownHeading {
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: [], types: ["contentfulPostBodyTextNode", "contentfulPostMetaDescriptionTextNode", "contentfulPageBodyTextNode", "contentfulPageMetaDescriptionTextNode"], many: false) @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
}

type MarkdownRemarkFrontmatter {
  title: String
}

type contentfulPostBodyTextNode implements Node @childOf(mimeTypes: [], types: ["ContentfulPost"], many: false) @dontInfer {
  body: String
}

type contentfulPageMetaDescriptionTextNode implements Node @childOf(mimeTypes: [], types: ["ContentfulPage"], many: false) @dontInfer {
  metaDescription: String
}

type contentfulPageBodyTextNode implements Node @childOf(mimeTypes: [], types: ["ContentfulPage"], many: false) @dontInfer {
  body: String
}

type contentfulPostMetaDescriptionTextNode implements Node @childOf(mimeTypes: [], types: ["ContentfulPost"], many: false) @dontInfer {
  metaDescription: String
}

type ContentfulTag implements Node @dontInfer {
  title: String
  slug: String
  post: [ContentfulPost] @link(by: "id", from: "post___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulTagSys
  node_locale: String
}

type ContentfulPost implements Node @dontInfer {
  title: String
  slug: String
  publishDate: Date @dateformat
  heroImage: ContentfulAsset @link(by: "id", from: "heroImage___NODE")
  tags: [ContentfulTag] @link(by: "id", from: "tags___NODE")
  body: contentfulPostBodyTextNode @link(by: "id", from: "body___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPostSys
  node_locale: String
  metaDescription: contentfulPostMetaDescriptionTextNode @link(by: "id", from: "metaDescription___NODE")
}

type ContentfulAsset implements Node @dontInfer {
  contentful_id: String
  file: ContentfulAssetFile
  title: String
  description: String
  node_locale: String
}

type ContentfulAssetFile {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulPostSys {
  revision: Int
  contentType: ContentfulPostSysContentType
}

type ContentfulPostSysContentType {
  sys: ContentfulPostSysContentTypeSys
}

type ContentfulPostSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulTagSys {
  revision: Int
  contentType: ContentfulTagSysContentType
}

type ContentfulTagSysContentType {
  sys: ContentfulTagSysContentTypeSys
}

type ContentfulTagSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulPage implements Node @dontInfer {
  title: String
  slug: String
  body: contentfulPageBodyTextNode @link(by: "id", from: "body___NODE")
  metaDescription: contentfulPageMetaDescriptionTextNode @link(by: "id", from: "metaDescription___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageSys
  node_locale: String
}

type ContentfulPageSys {
  revision: Int
  contentType: ContentfulPageSysContentType
}

type ContentfulPageSysContentType {
  sys: ContentfulPageSysContentTypeSys
}

type ContentfulPageSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulContentType implements Node @dontInfer {
  name: String
  displayField: String
  description: String
}

type ContentfulPageContentImage implements Node @derivedTypes @dontInfer {
  title: String
  image: ContentfulAsset @link(by: "id", from: "image___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageContentImageSys
  node_locale: String
}

type ContentfulPageContentImageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPageContentImageSysContentType
}

type ContentfulPageContentImageSysContentType @derivedTypes {
  sys: ContentfulPageContentImageSysContentTypeSys
}

type ContentfulPageContentImageSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type contentfulPageContentTextBodyRichTextNode implements Node @derivedTypes @dontInfer {
  nodeType: String
  content: [contentfulPageContentTextBodyRichTextNodeContent]
  body: String
  sys: contentfulPageContentTextBodyRichTextNodeSys
}

type contentfulPageContentTextBodyRichTextNodeContent @derivedTypes {
  nodeType: String
  content: [contentfulPageContentTextBodyRichTextNodeContentContent]
}

type contentfulPageContentTextBodyRichTextNodeContentContent @derivedTypes {
  nodeType: String
  value: String
  marks: [contentfulPageContentTextBodyRichTextNodeContentContentMarks]
}

type contentfulPageContentTextBodyRichTextNodeContentContentMarks {
  type: String
}

type contentfulPageContentTextBodyRichTextNodeSys {
  type: String
}

type ContentfulPageContentText implements Node @derivedTypes @dontInfer {
  title: String
  project: [ContentfulProject] @link(by: "id", from: "project___NODE")
  body: contentfulPageContentTextBodyRichTextNode @link(by: "id", from: "body___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPageContentTextSys
  node_locale: String
}

type ContentfulProject implements Node @derivedTypes @dontInfer {
  title: String
  headline: String
  slug: String
  link: String
  coverImage: ContentfulAsset @link(by: "id", from: "coverImage___NODE")
  pageContent: [ContentfulPageContentText] @link(by: "id", from: "pageContent___NODE")
  skills: [ContentfulSkill] @link(by: "id", from: "skills___NODE")
  home_page: [ContentfulHomePage] @link(by: "id", from: "home page___NODE") @proxy(from: "home page___NODE")
  intro: contentfulProjectIntroRichTextNode @link(by: "id", from: "intro___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulProjectSys
  node_locale: String
}

type ContentfulSkill implements Node @derivedTypes @dontInfer {
  name: String
  icon: ContentfulAsset @link(by: "id", from: "icon___NODE")
  home_page: [ContentfulHomePage] @link(by: "id", from: "home page___NODE") @proxy(from: "home page___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulSkillSys
  node_locale: String
  project: [ContentfulProject] @link(by: "id", from: "project___NODE")
}

type ContentfulHomePage implements Node @derivedTypes @dontInfer {
  title: String
  stats: [ContentfulStat] @link(by: "id", from: "stats___NODE")
  skills: [ContentfulSkill] @link(by: "id", from: "skills___NODE")
  logos: [ContentfulLogo] @link(by: "id", from: "logos___NODE")
  caseStudies: [ContentfulProject] @link(by: "id", from: "caseStudies___NODE")
  projects: [ContentfulProject] @link(by: "id", from: "projects___NODE")
  introText: contentfulHomePageIntroTextRichTextNode @link(by: "id", from: "introText___NODE")
  skillsText: contentfulHomePageSkillsTextRichTextNode @link(by: "id", from: "skillsText___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulHomePageSys
  node_locale: String
}

type ContentfulStat implements Node @derivedTypes @dontInfer {
  description: String
  amount: Int
  home_page: [ContentfulHomePage] @link(by: "id", from: "home page___NODE") @proxy(from: "home page___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulStatSys
  node_locale: String
}

type ContentfulStatSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulStatSysContentType
}

type ContentfulStatSysContentType @derivedTypes {
  sys: ContentfulStatSysContentTypeSys
}

type ContentfulStatSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulLogo implements Node @derivedTypes @dontInfer {
  name: String
  logo: ContentfulAsset @link(by: "id", from: "logo___NODE")
  home_page: [ContentfulHomePage] @link(by: "id", from: "home page___NODE") @proxy(from: "home page___NODE")
  spaceId: String
  contentful_id: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulLogoSys
  node_locale: String
}

type ContentfulLogoSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulLogoSysContentType
}

type ContentfulLogoSysContentType @derivedTypes {
  sys: ContentfulLogoSysContentTypeSys
}

type ContentfulLogoSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type contentfulHomePageIntroTextRichTextNode implements Node @derivedTypes @dontInfer {
  content: [contentfulHomePageIntroTextRichTextNodeContent]
  nodeType: String
  introText: String
  sys: contentfulHomePageIntroTextRichTextNodeSys
}

type contentfulHomePageIntroTextRichTextNodeContent @derivedTypes {
  content: [contentfulHomePageIntroTextRichTextNodeContentContent]
  nodeType: String
}

type contentfulHomePageIntroTextRichTextNodeContentContent @derivedTypes {
  marks: [contentfulHomePageIntroTextRichTextNodeContentContentMarks]
  value: String
  nodeType: String
}

type contentfulHomePageIntroTextRichTextNodeContentContentMarks {
  type: String
}

type contentfulHomePageIntroTextRichTextNodeSys {
  type: String
}

type contentfulHomePageSkillsTextRichTextNode implements Node @derivedTypes @dontInfer {
  content: [contentfulHomePageSkillsTextRichTextNodeContent]
  nodeType: String
  skillsText: String
  sys: contentfulHomePageSkillsTextRichTextNodeSys
}

type contentfulHomePageSkillsTextRichTextNodeContent @derivedTypes {
  content: [contentfulHomePageSkillsTextRichTextNodeContentContent]
  nodeType: String
}

type contentfulHomePageSkillsTextRichTextNodeContentContent @derivedTypes {
  data: contentfulHomePageSkillsTextRichTextNodeContentContentData
  value: String
  nodeType: String
  content: [contentfulHomePageSkillsTextRichTextNodeContentContentContent]
}

type contentfulHomePageSkillsTextRichTextNodeContentContentData {
  uri: String
}

type contentfulHomePageSkillsTextRichTextNodeContentContentContent {
  value: String
  nodeType: String
}

type contentfulHomePageSkillsTextRichTextNodeSys {
  type: String
}

type ContentfulHomePageSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulHomePageSysContentType
}

type ContentfulHomePageSysContentType @derivedTypes {
  sys: ContentfulHomePageSysContentTypeSys
}

type ContentfulHomePageSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulSkillSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulSkillSysContentType
}

type ContentfulSkillSysContentType @derivedTypes {
  sys: ContentfulSkillSysContentTypeSys
}

type ContentfulSkillSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type contentfulProjectIntroRichTextNode implements Node @derivedTypes @dontInfer {
  content: [contentfulProjectIntroRichTextNodeContent]
  nodeType: String
  intro: String
  sys: contentfulProjectIntroRichTextNodeSys
}

type contentfulProjectIntroRichTextNodeContent @derivedTypes {
  content: [contentfulProjectIntroRichTextNodeContentContent]
  nodeType: String
}

type contentfulProjectIntroRichTextNodeContentContent @derivedTypes {
  marks: [contentfulProjectIntroRichTextNodeContentContentMarks]
  value: String
  nodeType: String
}

type contentfulProjectIntroRichTextNodeContentContentMarks {
  type: String
}

type contentfulProjectIntroRichTextNodeSys {
  type: String
}

type ContentfulProjectSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulProjectSysContentType
}

type ContentfulProjectSysContentType @derivedTypes {
  sys: ContentfulProjectSysContentTypeSys
}

type ContentfulProjectSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}

type ContentfulPageContentTextSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPageContentTextSysContentType
}

type ContentfulPageContentTextSysContentType @derivedTypes {
  sys: ContentfulPageContentTextSysContentTypeSys
}

type ContentfulPageContentTextSysContentTypeSys {
  type: String
  linkType: String
  id: String
  contentful_id: String
}